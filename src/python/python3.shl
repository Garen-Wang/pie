// python parser and grammar

// keywords begin

and: "('and')" {

}

as: "('as')" {

}

assert: "('assert')" {

}

break: "('break')" {

}

class: "'class'" {

}

continue: "('continue')" {

}

def: "('def')" {

}

del: "('del')" {

}

elif: "('elif')" {

}

else: "('else')" {

}

except: "('except')" {

}

False: "('False')" {

}

finally: "('finally')" {

}

for: "('for')" {

}

from: "('from')" {

}

global: "('global')" {

}

if: "('if')" {

}

import: "('import')" {

}

in: "('in')" {

}

is: "('is')" {

}

lambda: "('lambda')" {

}

None: "('None')" {

}

nonlocal: "('nonlocal')" {

}

not: "('not')" {

}

or: "('or')" {

}

pass: "('pass')" {

}

raise: "('raise')" {

}

return: "('return')" {

}

True: "('True')" {

}

try: "('try')" {

}

while: "('while')" {

}

with: "('with')" {

}

yield: "('yield')" {

}

// keywords end

// grammar begin
where: "(Identifier ('.' Identifier)*)" {

}

ImportStatement: "from where import where as Identifier" {

}

Function: "(def Identifier ArgumentList)" {

}

ArgumentList: "((lparen (Argument (comma Argument)*)? rparen) colon Block)" {

}

Argument: "(Type Identifier)" {

}

Class: "class Identifier colon Block" {

}

Declaration: "Identifier equals Expr" {

}



// grammar end