// default color is black, if never mentioned
// recursively look at its color till the bottom definition

// markers

// key markers begin
single_comment_head: "('//')" {
  gray
}
multi_comment_head: "('/*')" {
  gray
}
multi_comment_tail: "('*/')" {
  gray
}
ref: "('&')" { }
deref: "('*')" { }
hash: "('#')" {
  purple
}
// key markers end

// keywords begin
typedef: "('typedef')" {
  pink
}
pragma: "('pragma')" {
  purple
}
define: "('define')" {
  purple
}
ifdef: "('ifdef')" {
  purple
}
ifndef: "('ifndef')" {
  purple
}
else: "('else')" {

}
endif: "('endif')" {
  purple
}
include: "('include')" {
  purple
}
using: "('using')" {
  pink
}
namespace: "('namespace')" {
  pink
}
const: "('const')" {
  pink
}
static: "('static')" {
  pink
}
auto: "('auto')" {
  pink
}
return: "('return')" {
  pink
}
while: "('while')" {
  pink
}
if: "('if')" {
  pink
}
inline: "('inline')" {
  pink
}
try: "('try')" {
  pink
}
catch: "('catch')" {
  pink
}
true: "('true')" {
  pink
}
false: "('false')" {
  pink
}
new: "('new')" {
  pink
}
delete: "('delete')" {
  pink
}
do: "('do')" {
  pink
}
for: "('for')" {
  pink
}
try: "('try')" {
  pink
}
catch: "('catch')" {
  pink
}
// keywords end

// grammars begin
Identifier: "(([a-zA-Z] | '_') ([a-zA-Z0-9] | '_')*)" {
  dark_purple
}

SingleLineComment: "(single_comment_head until_newline)" {
  gray
}
MultiLineComment: "(multi_comment_head (!multi_comment_tail .)* multi_comment_tail)" {
  gray
}

Comment: "(SingleLineComment | MultiLineComment)" { }

Ifdef: "(hash ifdef Indentation Identifier newline)" {
  $2 = orange
}
Ifndef: "(hash ifndef Indentation Identifier newline)" {
  $2 = orange
}
Else: "(hash else newline)" {
  $1 = purple
}
Endif: "(hash endif newline)" {

}
Define: "(hash define Indentation Identifier (Indentation Identifier?) newline)" {
  $2 = yellow
  $3 = white
}
Pragma: "(hash pragma Indentation until_newline newline)" {
  $3 = white
}
IncludePath: "(([a-zA-Z] | '.' | '/' | '_')+)" {

}
Include: "(hash include Indentation ((double_quote IncludePath double_quote) | (langle IncludePath rangle)) newline)" {
  $3 = orange
  $4 = orange
  $5 = orange
}
// all preprocessings are line feed
Preprocessing: "(Ifdef | Ifndef | Else | Endif | Define | Pragma | Include)" {

}

UsingNamespace: "(using Indentation namespace Indentation Identifier)" {
  $4 = purple
}
// QualifiedConstant has its own color
UsingAssignment: "(using Indentation Identifier Indentation '=' Indentation QualifiedConstant)" {

}
UsingQualified: "(using Indentation QualifiedConstant)" {

}

UsingStatement: "((UsingNamespace | UsingAssignment | UsingQualified) semicolon)" {

}

QualifiedConstant: "((Identifier '::')* Identifier)" {

}

TypedefStatement: "(typedef Indentation DataType Indentation Identifier semicolon)" {
  $4 = purple
}

ArgumentDataType: "(DataType | auto)" {

}

Argument: "(ArgumentDataType Indentation Identifier (single_equal Expr)?)" {

}
ArgumentList: "(lparen (Argument (comma Indentation Argument)*)? rparen)" {

}

Parameter: "(Expr)" {

}
ParameterList: "(lparen (Parameter (comma Indentation Parameter)*)? rparen)" {

}

TemplateList: "(langle DataType (comma Indentation DataType)* rangle)" {

}

ReturnStatement: "(return Indentation Expr semicolon)" {

}

Block: "(lbrace Indent (Grammar)* rbrace)" {

}

Branch: "(semicolon | Statement | Block)" {

}

WhileLoop: "(while Indentation lparen Expr rparen Indent Branch)" {

}

DoWhileLoop: "(do Indent Branch Indent while Indentation lparen Expr rparen semicolon)" {

}
Declaration: "(DataType Indentation Identifier (equals Expr)? (comma Indentation Identifier (equals Expr)?)*)" {

}
DeclarationStatement: "(Declaration semicolon)" {

}
ForLoop: "(for Indentation lparen Declaration semicolon Indentation Expr semicolon Indentation (Assignment | Expr) rparen Indent Branch)" {

}

this: "('this')" { }
bool: "('bool')" { }
int: "('int')" { }
char: "('char')" { }
long: "('long')" { }
double: "('double')" { }
float: "('float')" { }
short: "('short')" { }
long_long: "(long Indentation long)" { }
void: "('void')" { }
unsigned: "('unsigned')" { }
unsigned_char: "(unsigned Indentation char)" { }
unsigned_int: "(unsigned Indentation int)" { }
unsigned_short: "(unsigned Indentation short)" { }
unsigned_long: "(unsigned Indentation long)" { }
unsigned_long_long: "(unsigned Indentation long_long)" { }
signed: "('signed')" { }
signed_char: "(signed Indentation char)" { }
signed_int: "(signed Indentation int)" { }
signed_short: "(signed Indentation short)" { }
signed_long: "(signed Indentation long)" { }
signed_long_long: "(signed Indentation long_long)" { }
long_double: "(long Indentation double)" { }

std: "('std')" { }
vector: "('vector')" { }
string: "('string')" { }
map: "('map')" { }
set: "('set')" { }
size_type: "('size_type')" { }
size_t: "('size_t')" { }
iterator: "('iterator')" { }

PrimDataType: "(signed_long_long | signed_long | signed_int | signed_short | signed_char | signed | unsigned_long_long | unsigned_long | unsigned_int | unsigned_short | unsigned_char | unsigned | long_long | long_double | long | int | short | char | float | double)" {

}
STLDataType: "((std '::')? (string | vector | map | set | size_t) (TemplateList)? ('::' (iterator | size_type))?)" {

}

DataType: "((const Indentation)? (static Indentation)? (PrimDataType | STLDataType) (Indentation (asterisk | ampersand))?)" {

}

DecLiteral: "('-'? ('0' | ([1-9] [0-9]*)) ('.' [0-9]+)? ([eE] ('+' | '-') [0-9]*)?)" {
  yellow
}
HexLiteral: "('-'? '0x' ('0' | ([1-9a-fA-F] [0-9a-fA-F]*)))" {
  yellow
}
OctLiteral: "('-'? '0' [0-7]+)" {
  yellow
}
BoolLiteral: "(true | false)" {
  pink
}
CharLiteral: "(single_quote CharAtomic single_quote)" {
  orange
}
StringLiteral: "(double_quote CharAtomic* double_quote)" {
  orange
}
StringLiterals: "(StringLiteral (Indent StringLiteral)*)" {

}
Literal: "(DecLiteral | HexLiteral | OctLiteral | BoolLiteral | CharLiteral | StringLiterals)" {

}

ReturnDataType: "(DataType | void)" {

}

Function: "((inline Indentation)? ReturnDataType Indentation Identifier ArgumentList Indent Block)" {

}

FunctionCall: "((Identifier ParameterList? ('.' | '->' | '::'))* Identifier ParameterList)" {

}

class: "('class')" {

}

struct: "('struct')" {

}

Class: "(class Indentation Identifier Indent Block semicolon)" {

}

Struct: "(struct Indentation Identifier Indent Block semicolon)" {

}

// not totally right here
ThrowStatement: "(throw QualifiedConstant semicolon)" {

}

Statement: "(ReturnStatement | UsingStatement | DeclarationStatement | ExprListStatement | TypedefStatement | ThrowStatement)" {

}

IfStatement: "(if Indentation lparen Expr rparen Indent Branch (Indent else Indentation if Indentation lparen Expr rparen Indent Branch)* (Indent else Indent Branch)?)" {

}

TryStatement: "(try Indent Block Indent catch Indentation lparen Argument rparen Indent Block)" {

}
// has the same property as a statement (but actually is a block)
OtherStatement: "(ForLoop | WhileLoop | DoWhileLoop | IfStatement | TryStatement | Function | Block)" {

}

IDX: "(QualifiedConstant (lbracket Expr rbracket)+)" {

}

DEREF: "(asterisk Expr)" {

}
ADDR: "(ampersand Expr)" {

}

// lots of Indent below, maybe should be Indentation
EQ: "(Expr Indent '==' Indent Expr)" {

}
NEQ: "(Expr Indent '!=' Indent Expr)" {

}
LE: "(Expr Indent '<' Indent Expr)" {

}
GE: "(Expr Indent '>' Indent Expr)" {

}
LEQ: "(Expr Indent '<=' Indent Expr)" {

}
GEQ: "(Expr Indent '>=' Indent Expr)" {

}

ADD: "(Expr Indent '+' Indent Expr)" {

}
SUB: "(Expr Indent '-' Indent Expr)" {

}
MUL: "(Expr Indent '*' Indent Expr)" {

}
DIV: "(Expr Indent '/' Indent Expr)" {

}
MOD: "(Expr Indent '%' Indent Expr)" {

}
SELF_ADD: "(Expr Indent '+=' Indent Expr)" {

}
SELF_SUB: "(Expr Indent '-=' Indent Expr)" {

}
SELF_MUL: "(Expr Indent '*=' Indent Expr)" {

}
SELF_DIV: "(Expr Indent '/=' Indent Expr)" {

}
SELF_MOD: "(Expr Indent '%=' Indent Expr)" {

}

INC: "(Identifier '++' | '++' Identifier)" {

}
DEC: "(Identifier '--' | '--' Identifier)" {

}
AND: "(Expr Indent '&&' Indent Expr)" {

}
OR: "(Expr Indent '||' Indent Expr)" {

}
NOT: "('!' Expr)" {

}
B_AND: "(Expr Indent '&' Indent Expr)" {

}
B_OR: "(Expr Indent '|' Indent Expr)" {

}
SELF_B_AND: "(Expr Indent '&=' Indent Expr)" {

}
SELF_B_OR: "(Expr Indent '|=' Indent Expr)" {

}
B_NOT: "('~' Expr)" {

}
XOR: "(Expr Indent '^' Indent Expr)" {

}
SELF_XOR: "(Expr Indent '^=' Indent Expr)" {

}
LSH: "(Expr Indent '<<' Indent Expr)" {

}
RSH: "(Expr Indent '>>' Indent Expr)" {

}
SELF_LSH: "(Expr Indent '<<=' Indent Expr)" {

}
SELF_RSH: "(Expr Indent '>>=' Indent Expr)" {

}
COND: "(Expr Indent question_mark Indent Expr Indent colon Indent Expr)" {

}
PAREN: "(lparen Expr rparen)" {
}

// test here
VAR: "((Identifier ParameterList? ('.' | '->' | '::'))* Identifier ParameterList?)" {

}
PureAssignment: "(Expr equals Expr)" {

}
CompositeAssignment: "(SELF_ADD | SELF_SUB | SELF_MUL | SELF_DIV | SELF_MOD | SELF_B_AND | SELF_B_OR | SELF_XOR | SELF_LSH | SELF_RSH)" {

}
// assignment is a kind of Expr
Expr: "(PureAssignment | CompositeAssignment | COND | OR | AND | B_OR | XOR | B_AND | EQ | NEQ | LE | LEQ | GE | GEQ | LSH | RSH | ADD | SUB | MUL | DIV | MOD | NOT | DEREF | ADDR | INC | DEC | IDX | VAR | PAREN | Literal | QualifiedConstant)" {

}

ExprStatement: "(Expr semicolon)" {

}

ExprList: "(Expr (comma Indentation Expr)*)" {

}

ExprListStatement: "(ExprList semicolon)" {

}
private: "('private')" {

}
public: "('public')" {

}
protected: "('protected')" {

}
// line feed
Visibility: "((private | public | protected) colon newline)" {

}

Statements: "(Statement (Indentation Statement)*)" {

}

Grammar: "( (Preprocessing | Statements | OtherStatement | SingleLineComment) (Indentation SingleLineComment)? Indent)" {

}